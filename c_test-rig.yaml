AWSTemplateFormatVersion: "2010-09-09"
Description: Performance testing installation based on Locust.

Parameters:
  LocustImage:
    Type: String
    Default: locustio/locust:latest

  LocustCpu:
    Type: String
    Default: "1024"

  LocustMemory:
    Type: String
    Default: "2048"

  OperationMode:
    Type: String
    AllowedValues:
      - run normally
      - suspend
    Default: run normally

  OdooUrl:
    Type: String

  OdooUserName:
    Type: String
    Default: admin

  OdooUserPassword:
    Type: String

  LocustFileZipUrl:
    Type: String
    Default: https://raw.githubusercontent.com/MaksimAniskov/aws-global-odoo/master/load-testing/locustfile.zip

  OperatorWorkstationCidr:
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Parameters:
          - OdooUrl
          - OdooUserName
          - OdooUserPassword
          - OperatorWorkstationCidr
          - OperationMode

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.255.0.0/16
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.255.0.0/24
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.255.1.0/24
      AvailabilityZone: !Select [1, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  TaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: locust-crm-kanban
          Image: !Ref LocustImage
          EntryPoint:
            - ""
          Command:
            - /bin/sh
            - -c
            - wget $LOCUST_FILE_ZIP_URL -O locustfile.zip && unzip locustfile.zip && pip install -r requirements.txt && locust -H $TARGET_BASE_URL --web-port 8089 OdooUserCrmKanban
          PortMappings:
            - ContainerPort: 8089
          Environment:
            - Name: LOCUST_FILE_ZIP_URL
              Value: !Ref LocustFileZipUrl
            - Name: TARGET_BASE_URL
              Value: !Ref OdooUrl
            - Name: ODOO_USER_NAME
              Value: !Ref OdooUserName
            - Name: ODOO_USER_PASSWORD
              Value: !Ref OdooUserPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogsGroup
              awslogs-stream-prefix: crm-kanban
              awslogs-region:
                Ref: AWS::Region
        - Name: locust-crm-lead-create
          Image: !Ref LocustImage
          EntryPoint:
            - ""
          Command:
            - /bin/sh
            - -c
            - wget $LOCUST_FILE_ZIP_URL -O locustfile.zip && unzip locustfile.zip && pip install -r requirements.txt && locust -H $TARGET_BASE_URL --web-port 8090 OdooUserCrmLeadCreate
          PortMappings:
            - ContainerPort: 8090
          Environment:
            - Name: LOCUST_FILE_ZIP_URL
              Value: !Ref LocustFileZipUrl
            - Name: TARGET_BASE_URL
              Value: !Ref OdooUrl
            - Name: ODOO_USER_NAME
              Value: !Ref OdooUserName
            - Name: ODOO_USER_PASSWORD
              Value: !Ref OdooUserPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogsGroup
              awslogs-stream-prefix: crm-lead-create
              awslogs-region:
                Ref: AWS::Region
      Memory: !Ref LocustMemory
      Cpu: !Ref LocustCpu
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ECSCluster
      TaskDefinition: !Ref TaskDef
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - Ref: LocustSecurityGroup
      DesiredCount: !If [Suspend, 0, 1]

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECR
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
        - PolicyName: CloudWatch-Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}:*

  LocustSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Locust node
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: 8089
          FromPort: 8089
          CidrIp: !Ref OperatorWorkstationCidr
        - IpProtocol: tcp
          ToPort: 8090
          FromPort: 8090
          CidrIp: !Ref OperatorWorkstationCidr
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-locust

  LogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 1

Conditions:
  Suspend: !Equals [!Ref OperationMode, "suspend"]

Outputs:
  ClusterName:
    Value: !Ref ECSCluster

  ServiceName:
    Value: !GetAtt Service.Name
