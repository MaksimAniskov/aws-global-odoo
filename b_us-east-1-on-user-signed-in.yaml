AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  MainRegion:
    Type: String

  BranchRegion:
    Type: String

  ReadSessionFileFunctionName:
    Type: String
    Description: Look for it in the main region

  WriteSessionFileFunctionName:
    Type: String
    Description: Look for it in the branch region

Outputs:
  OnUserSignedIdFunctionArn:
    Value: !Sub ${Function.Arn}:${FunctionVersion.Version}

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Parameters:
          - MainRegion
          - ReadSessionFileFunctionName
          - BranchRegion
          - WriteSessionFileFunctionName
    ParameterLabels:
      MainRegion:
        default: Main region
      BranchRegion:
        default: Branch region
      ReadSessionFileFunctionName:
        default: Name of the ReadSessionFile Lambda function
      WriteSessionFileFunctionName:
        default: Name of the WriteSessionFile Lambda function

Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x # Upgrade to the better version once this resolved https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/80
      Handler: index.handler
      InlineCode: !Sub |
        const AWS = require('aws-sdk');
        const assert = require('assert').strict;

        const MainRegion = '${MainRegion}';
        const ReadSessionFileFunctionName = '${ReadSessionFileFunctionName}';
        const BranchRegion = '${BranchRegion}';
        const WriteSessionFileFunctionName = '${WriteSessionFileFunctionName}';

        const lambdaInBranchRegion = new AWS.Lambda({ region: BranchRegion });
        const lambdaInMainRegion = new AWS.Lambda({ region: MainRegion });

        /* En example of event object:
        ** {
        **   "Records": [
        **     {
        **       "cf": {
        **         "response": {
        **           "headers": {
        **             "set-cookie": [
        **               {
        **                 "key": "Set-Cookie",
        **                 "value": "session_id=3adef3684dc04f6d08d1e3e7a5b3975244d2d3a9; Expires=Sat, 25-Sep-2021 13:58:05 GMT; Max-Age=7776000; HttpOnly; Path=/"
        **               }
        **             ]
        **           }
        **         }
        **       }
        **     }
        **   ]
        ** }
        */

        exports.handler = async function(event, context) {
            const sessionId = event.Records[0].cf.response.headers['set-cookie'][0]
                .value
                .match(/session_id=(?<sessionId>[^;]+);/)
                .groups.sessionId;
                
            const readSessionFileLambdaResult = await lambdaInMainRegion.invoke({
                FunctionName: ReadSessionFileFunctionName,
                Payload: JSON.stringify({
                    fileName: `werkzeug_${!sessionId}.sess`
                })
            }).promise();

            const contentBase64 = JSON.parse(readSessionFileLambdaResult.Payload);
            
            const result = await lambdaInBranchRegion.invoke({
                FunctionName: WriteSessionFileFunctionName,
                Payload: JSON.stringify({
                    fileName: `werkzeug_${!sessionId}.sess`,
                    contentBase64
                })
            }).promise();
            
            assert.ifError(result.FunctionError);

            return event.Records[0].cf.response;
        }
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt Role.Arn

  FunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref Function

  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      # Uncomment the following, if need to collect its logs on CloudWatch Logs
      # ManagedPolicyArns:
      #   - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub arn:aws:lambda:*:${AWS::AccountId}:function:${ReadSessionFileFunctionName}
                  - !Sub arn:aws:lambda:*:${AWS::AccountId}:function:${WriteSessionFileFunctionName}
