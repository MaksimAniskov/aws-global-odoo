AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  DBInstanceClass:
    Type: String
    Description: aws rds describe-orderable-db-instance-options --engine aurora-postgresql --engine-version 12.4 --query "OrderableDBInstanceOptions[?SupportsGlobalDatabases].{DBInstanceClass:DBInstanceClass}" --output text
    Default: db.r6g.large

  DBEngineVersion:
    Type: String
    Default: "12.4"

  DBMasterUsername:
    Description: Database master username
    Default: adminuser
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "^[a-zA-Z]+[0-9a-zA-Z_]*$"
    ConstraintDescription: Must start with a letter. Only numbers, letters, and _ accepted. max length 16 characters

  DBMasterUserPassword:
    Description: Database master user password
    Type: String
    Default: adminuser

  DBSnapshotId:
    Description: Optional
    Type: String
    Default: ""

  VpcPeeringConnId:
    Type: String
    Default: ""

  MainVpcId:
    Type: String
    Default: ""

  MainRegion:
    Type: String
    Default: ""

  RDSGlobalClusterId:
    Description: When installing in a branch region, provide the RDS GC id defined on the main installation
    Type: String
    Default: ""

  MainLbDnsName:
    Type: String
    Default: ""

  MainDataSyncLocationArn:
    Type: String
    Default: ""

  DataSyncTaskScheduleExpression:
    Type: String
    Default: ""
    Description: |
      Example: rate(1 hour)

  OdooImage:
    Type: String
    Default: odoo:latest

  OdooCpu:
    Type: String
    Default: "1024"

  OdooMemory:
    Type: String
    Default: "2048"

  MaxCapacity:
    Type: Number
    Default: 5

  OperationMode:
    Type: String
    AllowedValues:
      - deploying
      - run normally
      - suspend
    Default: deploying

  OnUserSignedInFunctionArn:
    Type: String
    Default: ""
    Description: Look for it in us-east-1 region

  TestRigRegion:
    Type: String
    Default: ""

  TestRigClusterName:
    Type: String
    Default: ""

  TestRigServiceName:
    Type: String
    Default: ""

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Common"
        Parameters:
          - OdooImage
          - OdooCpu
          - OdooMemory
          - MaxCapacity
          - DBInstanceClass
          - DBEngineVersion
          - OperationMode
      - Label:
          default: "If main region"
        Parameters:
          - DBMasterUsername
          - DBMasterUserPassword
          - DBSnapshotId
      - Label:
          default: "If branch region"
        Parameters:
          - MainRegion
          - MainVpcId
          - RDSGlobalClusterId
          - MainLbDnsName
          - MainDataSyncLocationArn
      - Label:
          default: "Then one more thing in the main region"
        Parameters:
          - VpcPeeringConnId
      - Label:
          default: "Then one more thing in the branch region"
        Parameters:
          - DataSyncTaskScheduleExpression
      - Label:
          default: "And one more thing in the branch region, after the OnUserSignedIn Lambda@Edge deployed"
        Parameters:
          - OnUserSignedInFunctionArn
      - Label:
          default: "After the test rig deployed"
        Parameters:
          - TestRigRegion
          - TestRigClusterName
          - TestRigServiceName

Outputs:
  InitDbCommandLine:
    Condition: IsMain
    Value: !Sub >
      aws --region ${AWS::Region} ecs run-task
      --task-definition ${InitTaskDef}
      --cluster ${ECSCluster}
      --network-configuration 'awsvpcConfiguration={subnets=[${PublicSubnet1}],securityGroups=[${OdooHttpSecurityGroup}],assignPublicIp=ENABLED}'

  OdooUrl:
    Condition: IsLive
    Value: !Sub https://${CloudFrontDistribution.DomainName}

  VpcId:
    Condition: IsMain
    Value: !Ref VPC

  VpcPeeringConnId:
    Condition: IsBranch
    Value: !Ref VPCPeeringConn

  RDSGlobalClusterId:
    Condition: IsMain
    Value: !Ref DBGlobalCluster

  LbDnsName:
    Condition: IsMainAndLive
    Value: !GetAtt LoadBalancer.DNSName

  DataSyncLocationArn:
    Condition: IsMain
    Value: !Ref DataSyncLocation

  ReadSessionFile:
    Condition: IsMain
    Value: !Ref ReadSessionFile

  WriteSessionFile:
    Condition: IsBranch
    Value: !Ref WriteSessionFile

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !If [IsMain, 10.0.0.0/16, 10.1.0.0/16]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  VPCPeeringConn:
    Condition: IsBranch
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VPC
      PeerVpcId: !Ref MainVpcId
      PeerRegion: !Ref MainRegion
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !If [IsMain, 10.0.0.0/24, 10.1.0.0/24]
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !If [IsMain, 10.0.1.0/24, 10.1.1.0/24]
      AvailabilityZone: !Select [1, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicRoute2:
    Condition: IsBranch
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 10.0.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeeringConn

  PublicRoute3:
    Condition: CreateVpcPeeringRoute
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 10.1.0.0/16
      VpcPeeringConnectionId: !Ref VpcPeeringConnId

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  DBCluster:
    Condition: CreateDBCluster
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      Engine: aurora-postgresql
      EngineVersion: !Ref DBEngineVersion
      GlobalClusterIdentifier:
        !If [IsBranch, !Ref RDSGlobalClusterId, !Ref AWS::NoValue]
      DatabaseName:
        !If [
          IsMain,
          !If [DBSnapshotId, !Ref AWS::NoValue, odoo],
          !Ref AWS::NoValue,
        ]
      MasterUsername:
        !If [
          IsMain,
          !If [DBSnapshotId, !Ref AWS::NoValue, !Ref DBMasterUsername],
          !Ref AWS::NoValue,
        ]
      MasterUserPassword:
        !If [
          IsMain,
          !If [DBSnapshotId, !Ref AWS::NoValue, !Ref DBMasterUserPassword],
          !Ref AWS::NoValue,
        ]
      SnapshotIdentifier:
        !If [
          IsMain,
          !If [DBSnapshotId, !Ref DBSnapshotId, !Ref AWS::NoValue],
          !Ref AWS::NoValue,
        ]
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      BackupRetentionPeriod: 1
      StorageEncrypted: false # TODO: Configure encryption

  DBInstance:
    Condition: RunDBInstance
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: !Ref DBInstanceClass
      DBClusterIdentifier: !Ref DBCluster
      Engine: aurora-postgresql
      EngineVersion: !Ref DBEngineVersion
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Ref AWS::StackName
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB node
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DB

  DBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DBSecurityGroup.GroupId
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref DBSecurityGroup

  DBSecurityGroupIngress2:
    Condition: CreateDBCluster
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !GetAtt DBCluster.Endpoint.Port
      ToPort: !GetAtt DBCluster.Endpoint.Port
      CidrIp: 10.0.0.0/8

  DBGlobalCluster:
    Condition: IsMain
    Type: AWS::RDS::GlobalCluster
    Properties:
      SourceDBClusterIdentifier: !Ref DBCluster

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  HttpTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: odoo
          Image: !Ref OdooImage
          Command:
            - odoo
            - --no-database-list
            - -d
            - odoo
            - --max-cron-threads=0
            - --log-level
            - warn
            # - --proxy-mode # odoo behind a load balancer that offloads HTTPS/TLS correctly redirects to "https://..."
            # if these three things provided: a) odoo runs with --proxy-mode,
            # b) LB provides X-Forwarded-Proto, and c) X-Forwarded-Host headers.
            # None of AWS LB flavours provides X-Forwarded-Host. As the result there is no reason
            # to run odoo with --proxy-mode
          PortMappings:
            - ContainerPort: 8069
          Environment:
            - Name: DB_PORT_5432_TCP_ADDR
              Value:
                !If [
                  CreateDBCluster,
                  !If [
                    IsMain,
                    !GetAtt DBCluster.Endpoint.Address,
                    !GetAtt DBCluster.ReadEndpoint.Address,
                  ],
                  AWS::NoValue,
                ]
            - Name: DB_PORT_5432_TCP_PORT
              Value:
                !If [
                  CreateDBCluster,
                  !GetAtt DBCluster.Endpoint.Port,
                  AWS::NoValue,
                ]
            - Name: POSTGRES_USER
              Value: !Ref DBMasterUsername
            - Name: POSTGRES_PASSWORD
              Value: !Ref DBMasterUserPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogsGroup
              awslogs-stream-prefix: odoo-http
              awslogs-region:
                Ref: AWS::Region
          MountPoints:
            - ContainerPath: /var/lib/odoo
              SourceVolume: efs
      Volumes:
        - Name: efs
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFS
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPoint
            TransitEncryption: ENABLED
      Memory: !Ref OdooMemory
      Cpu: !Ref OdooCpu
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn

  InitTaskDef:
    Condition: IsMain
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: odoo
          Image: !Ref OdooImage
          Command:
            - odoo
            - -i
            - base
            - -d
            - odoo
            - --stop-after-init
          Environment:
            - Name: DB_PORT_5432_TCP_ADDR
              Value: !GetAtt DBCluster.Endpoint.Address
            - Name: DB_PORT_5432_TCP_PORT
              Value: !GetAtt DBCluster.Endpoint.Port
            - Name: POSTGRES_USER
              Value: !Ref DBMasterUsername
            - Name: POSTGRES_PASSWORD
              Value: !Ref DBMasterUserPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogsGroup
              awslogs-stream-prefix: odoo-init
              awslogs-region:
                Ref: AWS::Region
          MountPoints:
            - ContainerPath: /var/lib/odoo
              SourceVolume: efs
      Volumes:
        - Name: efs
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFS
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPoint
            TransitEncryption: ENABLED
      Memory: !Ref OdooMemory
      Cpu: !Ref OdooCpu
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn

  Service:
    Condition: IsLive
    DependsOn:
      - LoadBalancerListener
      - DBInstance
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ECSCluster
      TaskDefinition: !Ref HttpTaskDef
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - Ref: OdooHttpSecurityGroup
      LoadBalancers:
        - ContainerName: odoo
          ContainerPort: 8069
          TargetGroupArn:
            Ref: OdooTargetGroup

  ScalableTarget:
    Condition: IsLive
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId: !Sub service/${ECSCluster}/${Service.Name}
      MinCapacity: !If [IsLive, 1, 0]
      MaxCapacity: !If [IsLive, !Ref MaxCapacity, 0]
      RoleARN: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  AutoScalingPolicy:
    Condition: IsLive
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AvgCpu70
      ScalingTargetId: !Ref ScalableTarget
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EFS
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                Resource: !GetAtt EFS.Arn
        - PolicyName: ECR
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
        - PolicyName: CloudWatch-Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}:*

  OdooHttpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Odoo http worker node
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: "-1"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-odoo-http

  LoadBalancer:
    Condition: IsLive
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: 80
          FromPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          ToPort: 443
          FromPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LB

  LBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      IpProtocol: "-1"
      DestinationSecurityGroupId: !Ref OdooHttpSecurityGroup

  OdooTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      TargetType: ip
      Port: 8069
      Protocol: HTTP
      Matcher:
        HttpCode: "303"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"

  LoadBalancerListener:
    Condition: IsLive
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref OdooTargetGroup

  CloudFrontDistribution:
    Condition: IsLive
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: lb-main
            DomainName: !If
              - IsMainAndLive
              - !GetAtt LoadBalancer.DNSName
              - !Ref MainLbDnsName
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
          - !If
            - IsBranchAndLive
            - Id: lb-branch
              DomainName: !GetAtt LoadBalancer.DNSName
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
            - !Ref AWS::NoValue
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: lb-main
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer
          Compress: yes
        CacheBehaviors: !If
          - IsBranch
          - - PathPattern: /web/login
              AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
              LambdaFunctionAssociations:
                - !If
                  - OnUserSignedInFunctionArn
                  - EventType: origin-response
                    LambdaFunctionARN: !Ref OnUserSignedInFunctionArn
                  - !Ref AWS::NoValue
              ViewerProtocolPolicy: redirect-to-https
              TargetOriginId: lb-main
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
              OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer
              Compress: yes
            - PathPattern: /web/dataset/search_read
              AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
              ViewerProtocolPolicy: redirect-to-https
              TargetOriginId: lb-branch
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
              OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer
              Compress: yes
            - PathPattern: /web/dataset/call_kw/crm.lead/web_read_group
              AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
              ViewerProtocolPolicy: redirect-to-https
              TargetOriginId: lb-branch
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
              OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer
              Compress: yes
            - PathPattern: /web/dataset/call_kw/crm.lead/read_progress_bar
              AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
              ViewerProtocolPolicy: redirect-to-https
              TargetOriginId: lb-branch
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
              OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer
              Compress: yes
            - PathPattern: /web/action/run
              AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
              ViewerProtocolPolicy: redirect-to-https
              TargetOriginId: lb-branch
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
              OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer
              Compress: yes
          - !Ref AWS::NoValue
        PriceClass: PriceClass_All
        Enabled: yes
        IPV6Enabled: yes
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: TLSv1.2_2019
        HttpVersion: http2
        Comment: !Ref AWS::StackName

  ReadSessionFile:
    Condition: IsMain
    DependsOn:
      - EFSMountTarget1
      - EFSMountTarget2
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x # Upgrade to the better version once this gets resolved https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/80
      Handler: index.handler
      InlineCode: |
        const fs = require('fs').promises;

        /* An example of event parameter object:
        ** {
        **     "fileName": "werkzeug_01234567890abcdef0123456789abcdef0123456.sess"
        ** }
        */
        exports.handler = async function (event, context) {
            const fileContent = await fs.readFile(`${process.env.DirectoryName}/${event.fileName}`);
            return fileContent.toString('base64');
        }
      MemorySize: 128
      Timeout: 30
      VpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroupIds:
          - !Ref SecurityGroupEgressAll
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Environment:
        Variables:
          DirectoryName: /mnt/efs/sessions
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AmazonElasticFileSystemClientReadWriteAccess
        # Uncomment following line, if need to collect its logs on CloudWatch Logs
        # - AWSLambdaBasicExecutionRole

  WriteSessionFile:
    Condition: IsBranch
    DependsOn:
      - EFSMountTarget1
      - EFSMountTarget2
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x # Upgrade to the better version once this resolved https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/80
      Handler: index.handler
      InlineCode: |
        const fs = require('fs').promises;

        /* An example of event parameter object:
        ** {
        **     "fileName": "werkzeug_01234567890abcdef0123456789abcdef0123456.sess",
        **     "contentBase64": "YWJj"
        ** }
        */
        exports.handler = async function (event, context) {
            console.log(JSON.stringify(event));

            await fs.writeFile(
                `${process.env.DirectoryName}/${event.fileName}`,
                new Buffer.from(event.contentBase64, 'base64')
            );
        }
      MemorySize: 128
      Timeout: 30
      VpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroupIds:
          - !Ref SecurityGroupEgressAll
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Environment:
        Variables:
          DirectoryName: /mnt/efs/sessions
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AmazonElasticFileSystemClientReadWriteAccess
        # Uncomment following line, if need to collect its logs on CloudWatch Logs
        # - AWSLambdaBasicExecutionRole

  SecurityGroupEgressAll:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all outbound traffic
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-egress-all

  LambdaReplicatorServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: replicator.lambda.amazonaws.com

  CloudfrontLoggerServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: logger.cloudfront.amazonaws.com

  EFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Ref AWS::StackName

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref PublicSubnet1

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref PublicSubnet2

  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFS
      PosixUser:
        Uid: "0"
        Gid: "0"
      AccessPointTags:
        - Key: Name
          Value: odoo

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to EFS from the containers
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/8
          IpProtocol: tcp
          ToPort: 2049
          FromPort: 2049
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EFS

  DataSyncLocation:
    DependsOn:
      - EFSMountTarget1
      - EFSMountTarget2
    Type: AWS::DataSync::LocationEFS
    Properties:
      Ec2Config:
        SecurityGroupArns:
          - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${EFSSecurityGroup.GroupId}
        SubnetArn: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PublicSubnet1}
      EfsFilesystemArn: !GetAtt EFS.Arn

  DataSyncTask:
    Condition: CreateDataSyncTask
    Type: AWS::DataSync::Task
    Properties:
      SourceLocationArn: !Ref MainDataSyncLocationArn
      DestinationLocationArn: !Ref DataSyncLocation
      Excludes:
        - FilterType: SIMPLE_PATTERN
          Value: /sessions
      Name: !Ref AWS::StackName
      Schedule:
        ScheduleExpression: !Ref DataSyncTaskScheduleExpression
      Options:
        LogLevel: BASIC
      CloudWatchLogGroupArn: !GetAtt LogsGroup.Arn

  LogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 1

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-${AWS::Region}
      DashboardBody: !Sub
        - |
          {
            "widgets": [
              ${Widgets}
            ]
          }
        - Widgets: !Join
            - ","
            - - !If
                - CreateDBCluster
                - !Sub |
                  {
                    "x": 0,
                    "y": 0,
                    "width": 12,
                    "height": 6,
                    "properties": {
                      "title": "RDS",
                      "metrics": [
                          [ "AWS/RDS", "CPUUtilization", "DBClusterIdentifier", "${DBCluster}", { "color": "#d62728", "label": "CPU" } ],
                          [ ".", "DatabaseConnections", ".", ".", { "yAxis": "right", "color": "#98df8a", "label": "Connections" } ]
                      ],
                      "period": 60,
                      "yAxis": {
                          "left": {
                              "min": 0,
                              "max": 100
                          },
                          "right": {
                              "min": 0
                          }
                      },
                      "region": "${AWS::Region}"
                    },
                    "type": "metric"
                  }
                - !Ref AWS::NoValue

              - !If
                - IsBranchAndLive
                - !Sub |
                  {
                    "x": 12,
                    "y": 0,
                    "width": 12,
                    "height": 6,
                    "properties": {
                      "title": "RDS",
                      "metrics": [
                          [ "AWS/RDS", "AuroraGlobalDBProgressLag", "DBClusterIdentifier", "${DBCluster}", { "color": "#aec7e8", "label": "Aurora Global lag" } ]
                      ],
                      "period": 60,
                      "yAxis": {
                          "left": {
                              "min": 0
                          }
                      },
                      "region": "${AWS::Region}"
                    },
                    "type": "metric"
                  }
                - !Ref AWS::NoValue

              - !If
                - IsLive
                - !Sub |
                  {
                    "x": 0,
                    "y": 6,
                    "width": 12,
                    "height": 6,
                    "properties": {
                      "title": "Application",
                      "metrics": [
                          [ "AWS/ECS", "CPUUtilization", "ServiceName", "${Service.Name}", "ClusterName", "${ECSCluster}", { "label": "CPU", "color": "#d62728" } ],
                          [ ".", "MemoryUtilization", ".", ".", ".", ".", { "label": "RAM", "color": "#ff7f0e" } ],
                          [ "AWS/ApplicationELB", "HealthyHostCount", "TargetGroup", "${OdooTargetGroup.TargetGroupFullName}", "LoadBalancer", "${LoadBalancer.LoadBalancerFullName}", { "yAxis": "right", "label": "Number of containers" } ]
                      ],
                      "period": 60,
                      "yAxis": {
                          "left": {
                              "min": 0,
                              "max": 100
                          },
                          "right": {
                              "min": 0
                          }
                      },
                      "region": "${AWS::Region}"
                    },
                    "type": "metric"
                  }
                - !Ref AWS::NoValue

              - !If
                - IsLive
                - !Sub |
                  {
                    "x": 12,
                    "y": 6,
                    "width": 12,
                    "height": 6,
                    "properties": {
                      "title": "Load Balancer",
                      "metrics": [
                          [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${LoadBalancer.LoadBalancerFullName}", { "yAxis": "right", "label": "Response time Average", "stat": "Average" } ],
                          [ ".", "TargetResponseTime", ".", ".", { "yAxis": "right", "label": "Response time P95", "stat": "p95", "color": "#aec7e8" } ],
                          [ ".", "RequestCount", ".", ".", { "stat": "Sum", "label": "Request count", "color": "#2ca02c" } ]
                      ],
                      "period": 60,
                      "yAxis": {
                          "left": {
                              "min": 0
                          },
                          "right": {
                              "min": 0
                          }
                      },
                      "region": "${AWS::Region}"
                    },
                    "type": "metric"
                  }
                - !Ref AWS::NoValue

              - !If
                - TestRigKnown
                - !Sub |
                  {
                    "x": 12,
                    "y": 12,
                    "width": 12,
                    "height": 6,
                    "properties": {
                      "title": "Test rig (locust)",
                      "metrics": [
                          [ "AWS/ECS", "CPUUtilization", "ServiceName", "${TestRigServiceName}", "ClusterName", "${TestRigClusterName}", { "label": "CPU", "color": "#d62728" } ],
                          [ ".", "MemoryUtilization", ".", ".", ".", ".", { "label": "RAM", "color": "#ff7f0e" } ]
                      ],
                      "period": 60,
                      "yAxis": {
                          "left": {
                              "min": 0,
                              "max": 100
                          }
                      },
                      "region": "${TestRigRegion}"
                    },
                    "type": "metric"
                  }
                - !Ref AWS::NoValue

Conditions:
  DBSnapshotId: !Not [!Equals [!Ref DBSnapshotId, ""]]
  IsLive: !Equals [!Ref OperationMode, "run normally"]
  CreateDBCluster: !Or
    - !Equals [!Ref RDSGlobalClusterId, ""] # IsMain
    - !Not [!Equals [!Ref OperationMode, "suspend"]]
  RunDBInstance: !Not [!Equals [!Ref OperationMode, "suspend"]]
  IsMain: !Equals [!Ref RDSGlobalClusterId, ""]
  IsBranch: !Not [!Equals [!Ref RDSGlobalClusterId, ""]]
  CreateVpcPeeringRoute: !Not [!Equals [!Ref VpcPeeringConnId, ""]]
  IsMainAndLive: !And
    - !Equals [!Ref RDSGlobalClusterId, ""]
    - !Equals [!Ref OperationMode, "run normally"]
  IsBranchAndLive: !And
    - !Not [!Equals [!Ref RDSGlobalClusterId, ""]]
    - !Equals [!Ref OperationMode, "run normally"]
  CreateDataSyncTask: !And
    - !Not [!Equals [!Ref MainDataSyncLocationArn, ""]]
    - !Not [!Equals [!Ref DataSyncTaskScheduleExpression, ""]]
  OnUserSignedInFunctionArn: !Not [!Equals [!Ref OnUserSignedInFunctionArn, ""]]
  TestRigKnown: !And
    - !Not [!Equals [!Ref TestRigRegion, ""]]
    - !Not [!Equals [!Ref TestRigClusterName, ""]]
    - !Not [!Equals [!Ref TestRigServiceName, ""]]
